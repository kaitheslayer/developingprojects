import pygame
import random

pygame.init()

# colour variables
white = (255, 255, 255)
black = (0, 0, 0)
red = (255, 0, 0)
dark_grey = (46, 46, 46)

# game window dimensions
display_width = 800
display_height = 600


# player
block_size = 10

# FPS
FPS = 30
clock = pygame.time.Clock()

# Text
font_size = 25
font = pygame.font.SysFont(None, font_size)

# Creating game window
game_display = pygame.display.set_mode((display_width,display_height))
pygame.display.set_caption("Snake")

def snake(block_size, snake_list):
    for XnY in snake_list:
        pygame.draw.rect(game_display, white, [XnY[0], XnY[1], block_size, block_size])

def text_objects(text, colour):
    textSurface = font.render(text, True, colour)
    return textSurface, textSurface.get_rect()


def message_to_screen_center(msg, colour, distance_from_center):
    textSurf, textRect = text_objects(msg, colour)
    textRect.center = (display_width/2), (display_height/2) + distance_from_center
    game_display.blit(textSurf, textRect)

def message_to_screen(msg, colour, x, y):
    screen_text = font.render(msg, True, colour)
    game_display.blit(screen_text, [x, y])


def game_loop():
    game_exit = False
    game_over = False

    # player coordinates/movement
    lead_x = display_width/2
    lead_y = display_height/2
    lead_x_change = 0
    lead_y_change = 0

    snake_list = []
    snake_length = 1

    # Apple coordinates
        # " - block_size " because top left corner of rect = coord
        # coords rounded to nearest 10, so as to be in same grid as player
    rand_apple_x = round(random.randrange(0, display_width - block_size)/10) * 10
    rand_apple_y = round(random.randrange(0, display_height - block_size)/10) * 10

    score = 1

    while not game_exit:

        while game_over == True:
            game_display.fill(dark_grey)
            message_to_screen_center("Game over, press C to play again or Q to quit", red, 0)
            message_to_screen_center("Score: %s" %str(score), black, font_size)
            pygame.display.update()

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    game_exit = True
                    game_over = False

                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_q:
                        game_exit = True
                        game_over = False
                    if event.key == pygame.K_c:
                        game_loop()


        for event in pygame.event.get():
            # EXIT game
            if event.type == pygame.QUIT:
                game_exit = True
            # key pressing detection
            if event.type == pygame.KEYDOWN:
                # left/right movement
                if event.key == pygame.K_LEFT:
                     lead_x_change = -1 * block_size
                     lead_y_change = 0

                elif event.key == pygame.K_RIGHT:
                    lead_x_change = block_size
                    lead_y_change = 0

                # up/down movement
                elif event.key == pygame.K_UP:
                     lead_y_change = -1 * block_size
                     lead_x_change = 0

                elif event.key == pygame.K_DOWN:
                    lead_y_change = block_size
                    lead_x_change = 0
        # boundary
        if lead_x >= display_width or lead_x < 0 or lead_y >= display_height or lead_y < 0:
                game_over = True

        # move player
        lead_x += lead_x_change
        lead_y += lead_y_change

        # fill display
        game_display.fill(dark_grey)
        # apple
        pygame.draw.rect(game_display, red, [rand_apple_x, rand_apple_y, block_size, block_size])

        # player
        snake_head = []
        snake_head.append(lead_x)
        snake_head.append(lead_y)

        snake_list.append(snake_head)

        if len(snake_list) > snake_length:
            del snake_list[0]

        # snake collides with self
            # [:-1] -> means every element except last one (which is snake head)
        for each_segment in snake_list[:-1]:
            if each_segment == snake_head:
                game_over = True


        snake(block_size, snake_list)

        message_to_screen("Score: %s" %str(score), black, 10, 10)

        # render display
        pygame.display.update()

        # player-apple collision
        if lead_x == rand_apple_x and lead_y == rand_apple_y:
            rand_apple_x = round(random.randrange(0, display_width - block_size)/10) * 10
            rand_apple_y = round(random.randrange(0, display_height - block_size)/10) * 10
            snake_length += 1
            score += 1


        clock.tick(FPS)


    pygame.quit()
    quit()

game_loop()
# high score: 38
